package run;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;

import javax.imageio.stream.FileImageInputStream;

import messge.Msg;

public class Setting {

	public static void main(String[] args) {
		new Setting();
	}

	private String URL = "jdbc:mysql://localhost/?" + "ChacterEncoding-UTF-8&" + "serverTimezone=UTC&"
			+ "allowLoadLocalInfile=true&" + "allowPublicKeyRetrieval=true&" + "allowMultiQueries=true";
	private String USER = "root";
	private String PASSWORD = "1234";
	private Connection con;
	private PreparedStatement pstmt;

	public Setting() {
		// TODO Auto-generated constructor stub
		try {
			con = DriverManager.getConnection(URL, USER, PASSWORD);
			System.out.println("con 연결 성공");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		int result = setDb("-- MySQL Script generated by MySQL Workbench\r\n" + "-- Wed Mar  1 10:41:34 2023\r\n"
				+ "-- Model: New Model    Version: 1.0\r\n" + "-- MySQL Workbench Forward Engineering\r\n" + "\r\n"
				+ "SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;\r\n"
				+ "SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;\r\n"
				+ "SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';\r\n"
				+ "\r\n" + "-- -----------------------------------------------------\r\n" + "-- Schema setting2\r\n"
				+ "-- -----------------------------------------------------\r\n"
				+ "DROP SCHEMA IF EXISTS `setting2` ;\r\n" + "\r\n"
				+ "-- -----------------------------------------------------\r\n" + "-- Schema setting2\r\n"
				+ "-- -----------------------------------------------------\r\n"
				+ "CREATE SCHEMA IF NOT EXISTS `setting2` DEFAULT CHARACTER SET utf8 ;\r\n" + "USE `setting2` ;\r\n"
				+ "\r\n" + "-- -----------------------------------------------------\r\n"
				+ "-- Table `setting2`.`division`\r\n" + "-- -----------------------------------------------------\r\n"
				+ "CREATE TABLE IF NOT EXISTS `setting2`.`division` (\r\n"
				+ "  `d_no` INT(11) NOT NULL AUTO_INCREMENT,\r\n" + "  `d_name` VARCHAR(50) NULL,\r\n"
				+ "  PRIMARY KEY (`d_no`))\r\n" + "ENGINE = InnoDB;\r\n" + "\r\n" + "\r\n"
				+ "-- -----------------------------------------------------\r\n" + "-- Table `setting2`.`book`\r\n"
				+ "-- -----------------------------------------------------\r\n"
				+ "CREATE TABLE IF NOT EXISTS `setting2`.`book` (\r\n" + "  `b_no` INT(11) NOT NULL AUTO_INCREMENT,\r\n"
				+ "  `b_name` VARCHAR(50) NULL,\r\n" + "  `d_no` INT(11) NULL,\r\n"
				+ "  `b_author` VARCHAR(50) NULL,\r\n" + "  `b_count` INT(11) NULL,\r\n"
				+ "  `b_page` INT(11) NULL,\r\n" + "  `b_exp` VARCHAR(500) NULL,\r\n" + "  `b_img` LONGBLOB NULL,\r\n"
				+ "  PRIMARY KEY (`b_no`),\r\n" + "  INDEX `fk_book_division1_idx` (`d_no` ASC) VISIBLE,\r\n"
				+ "  CONSTRAINT `fk_book_division1`\r\n" + "    FOREIGN KEY (`d_no`)\r\n"
				+ "    REFERENCES `setting2`.`division` (`d_no`)\r\n" + "    ON DELETE NO ACTION\r\n"
				+ "    ON UPDATE NO ACTION)\r\n" + "ENGINE = InnoDB;\r\n" + "\r\n" + "\r\n"
				+ "-- -----------------------------------------------------\r\n" + "-- Table `setting2`.`user`\r\n"
				+ "-- -----------------------------------------------------\r\n"
				+ "CREATE TABLE IF NOT EXISTS `setting2`.`user` (\r\n" + "  `u_no` INT(11) NOT NULL AUTO_INCREMENT,\r\n"
				+ "  `u_name` VARCHAR(5) NULL,\r\n" + "  `u_id` VARCHAR(10) NULL,\r\n"
				+ "  `u_pw` VARCHAR(10) NULL,\r\n" + "  PRIMARY KEY (`u_no`))\r\n" + "ENGINE = InnoDB;\r\n" + "\r\n"
				+ "\r\n" + "-- -----------------------------------------------------\r\n"
				+ "-- Table `setting2`.`likebook`\r\n" + "-- -----------------------------------------------------\r\n"
				+ "CREATE TABLE IF NOT EXISTS `setting2`.`likebook` (\r\n"
				+ "  `l_no` INT(11) NOT NULL AUTO_INCREMENT,\r\n" + "  `u_no` INT(11) NULL,\r\n"
				+ "  `b_no` INT(11) NULL,\r\n" + "  PRIMARY KEY (`l_no`),\r\n"
				+ "  INDEX `fk_likebook_book_idx` (`b_no` ASC) VISIBLE,\r\n"
				+ "  INDEX `fk_likebook_user1_idx` (`u_no` ASC) VISIBLE,\r\n" + "  CONSTRAINT `fk_likebook_book`\r\n"
				+ "    FOREIGN KEY (`b_no`)\r\n" + "    REFERENCES `setting2`.`book` (`b_no`)\r\n"
				+ "    ON DELETE NO ACTION\r\n" + "    ON UPDATE NO ACTION,\r\n"
				+ "  CONSTRAINT `fk_likebook_user1`\r\n" + "    FOREIGN KEY (`u_no`)\r\n"
				+ "    REFERENCES `setting2`.`user` (`u_no`)\r\n" + "    ON DELETE NO ACTION\r\n"
				+ "    ON UPDATE NO ACTION)\r\n" + "ENGINE = InnoDB;\r\n" + "\r\n" + "\r\n"
				+ "-- -----------------------------------------------------\r\n" + "-- Table `setting2`.`rental`\r\n"
				+ "-- -----------------------------------------------------\r\n"
				+ "CREATE TABLE IF NOT EXISTS `setting2`.`rental` (\r\n"
				+ "  `r_no` INT(11) NOT NULL AUTO_INCREMENT,\r\n" + "  `u_no` INT(11) NULL,\r\n"
				+ "  `b_no` INT(11) NULL,\r\n" + "  `r_date` DATE NULL,\r\n" + "  `r_count` INT(11) NULL,\r\n"
				+ "  `r_reading` INT(11) NULL,\r\n" + "  `r_returnday` DATE NULL,\r\n" + "  PRIMARY KEY (`r_no`),\r\n"
				+ "  INDEX `fk_rental_book1_idx` (`b_no` ASC) VISIBLE,\r\n"
				+ "  INDEX `fk_rental_user1_idx` (`u_no` ASC) VISIBLE,\r\n" + "  CONSTRAINT `fk_rental_book1`\r\n"
				+ "    FOREIGN KEY (`b_no`)\r\n" + "    REFERENCES `setting2`.`book` (`b_no`)\r\n"
				+ "    ON DELETE NO ACTION\r\n" + "    ON UPDATE NO ACTION,\r\n" + "  CONSTRAINT `fk_rental_user1`\r\n"
				+ "    FOREIGN KEY (`u_no`)\r\n" + "    REFERENCES `setting2`.`user` (`u_no`)\r\n"
				+ "    ON DELETE NO ACTION\r\n" + "    ON UPDATE NO ACTION)\r\n" + "ENGINE = InnoDB;\r\n" + "\r\n"
				+ "set global local_infile = 1;\r\n"
				+ "load data local infile './datafiles/user.txt' into table setting2.user lines terminated by '\\r' ignore 1 lines;\r\n"
				+ "load data local infile './datafiles/division.txt' into table setting2.division lines terminated by '\\r' ignore 1 lines;\r\n"
				+ "load data local infile './datafiles/book.txt' into table setting2.book lines terminated by '\\r\\n' ignore 1 lines;\r\n"
				+ "load data local infile './datafiles/likebook.txt' into table setting2.likebook lines terminated by '\\r' ignore 1 lines;\r\n"
				+ "load data local infile './datafiles/rental.txt' into table setting2.rental lines terminated by '\\r' ignore 1 lines;\r\n"
				+ "\r\n" + "drop user if exists 'user'@'localhost';\r\n"
				+ "create user 'user'@'localhost' identified by '1234';\r\n"
				+ "grant select, insert, update, delete on setting2.* to 'user'@'localhost';\r\n" + "\r\n"
				+ "SET SQL_MODE=@OLD_SQL_MODE;\r\n" + "SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;\r\n"
				+ "SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;\r\n" + "");

		Vector<Vector<String>> bookIndex = getDb("SELECT * FROM setting2.book;");
		for (Vector<String> row : bookIndex) {
			File file = new File("./datafiles/book/" + row.get(0) + ".jpg");
			System.out.println(file);

			FileInputStream img = null;
			try {
				img = new FileInputStream(file);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				System.out.println(row.get(0) + "번 이미지 누락");
				e.printStackTrace();
			}

			setDb("UPDATE `setting2`.`book` SET `b_img` = ? WHERE (`b_no` = ?);", img, row.get(0));

		}

		if (result == -1) {

			Msg.error("셋팅 실패");
			return;

		}

		Msg.info("셋팅 성공");

	}

	public int setDb(String sql, Object... vals) {
		// TODO Auto-generated method stub
		try {
			pstmt = con.prepareStatement(sql);

			int cnt = 1;
			for (Object val : vals) {
				pstmt.setObject(cnt++, val);

			}

			System.out.println("setDb 성공");
			return pstmt.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("setDb 실패");
			return -1;
		}
	}

	public Vector<Vector<String>> getDb(String sql, Object... vals) {
		// TODO Auto-generated method stub
		Vector<Vector<String>> data = new Vector<Vector<String>>();
		try {
			pstmt = con.prepareStatement(sql);

			int cnt = 1;
			for (Object val : vals) {
				pstmt.setObject(cnt++, val);

			}

			ResultSet rs = pstmt.executeQuery();
			ResultSetMetaData rsmd = rs.getMetaData();

			while (rs.next()) {
				Vector<String> row = new Vector<String>();
				for (int i = 0; i < rsmd.getColumnCount(); i++) {
					row.add(rs.getObject(i + 1) + "");
				}

				data.add(row);

			}

			System.out.println("getDb 성공");

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("getDb 실패");
			return null;
		}
		return data;
	}
}
